<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}}</title>
    <link rel="stylesheet" href="/css/global-dark-theme.css">
    <link rel="stylesheet" href="/css/style_userprofile.css">
    <link rel="stylesheet" href="/css/components.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
    <style>
        .security-settings {
            background-color: var(--bg-secondary);
            border: 1px solid var(--border-primary);
            border-radius: var(--radius-lg);
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: var(--shadow-sm);
        }
        
        .security-settings h3 {
            margin: 0 0 1.5rem 0;
            color: var(--text-primary);
            font-size: 1.5rem;
            font-weight: 600;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border-primary);
        }
        
        .security-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
        }
        
        .security-link {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 1rem 1.25rem;
            background-color: var(--bg-tertiary);
            color: var(--text-primary);
            text-decoration: none;
            border: 1px solid var(--border-primary);
            border-radius: var(--radius-md);
            transition: all var(--transition-normal);
            box-shadow: var(--shadow-sm);
            font-weight: 500;
        }
        
        .security-link:hover {
            background-color: var(--bg-hover);
            border-color: var(--border-focus);
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
            color: var(--text-primary);
        }
        
        .security-link i {
            font-size: 1.25rem;
            color: var(--accent-green);
            flex-shrink: 0;
        }
        
        .security-link span {
            font-size: 0.875rem;
        }
        
        @media (max-width: 768px) {
            .security-settings {
                padding: 1.5rem;
            }
            
            .security-options {
                grid-template-columns: 1fr;
            }
            
            .security-link {
                padding: 0.875rem 1rem;
            }
        }
    </style>
</head>
<body data-username="{{loggedInUser.username}}" data-page="userProfile">
    <div class="header">
        <div class="logo-container">
            <a href="/">
                <img src="/img/ReadIt.png" alt="ReadIT logo" class="logo">
                <h1 class="site-title">Read<span class="highlight">IT</span></h1>
            </a>
        </div>
        <div class="user-info">
            <div class="dropdown" id="profile-dropdown">
                <span class="username">{{loggedInUser.username}}</span>
                <div class="dropdown-content">
                    <a href="/profile/{{loggedInUser.username}}">View Profile</a>
                    <a href="/logout">Logout</a>
                </div>
            </div>
        </div>
    </div>

    <div class="content">
        <div class="profile-header">
            <div class="profile-details">
                <h2 class="profile-username">{{loggedInUser.username}}</h2>
                <div class="quote-container">
                    <p class="profile-quote" id="quote-display">{{#if loggedInUser.quote}}{{loggedInUser.quote}}{{else}}<em>No quote set. Click edit to add one!</em>{{/if}}</p>
                    <button class="edit-button btn btn-secondary" id="edit-quote-button">Edit Quote</button>
                    <div class="edit-quote-input" id="quote-form" style="display: none;">
                        <form action="/profile/{{loggedInUser.username}}" method="POST">
                            <div class="form-group">
                                <input type="text" id="quote-input" name="quote" value="{{loggedInUser.quote}}" maxlength="200" placeholder="Enter your favorite quote...">
                            </div>
                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary">Save</button>
                                <button type="button" class="btn btn-secondary" id="cancel-quote-edit">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <div class="sections">
            <div class="security-settings">
                <h3>Security Settings</h3>
                <div class="security-options">
                    <a href="/change-password" class="security-link">
                        <i class="fas fa-key"></i>
                        <span>Change Password</span>
                    </a>
                    <a href="/security-questions" class="security-link">
                        <i class="fas fa-shield-alt"></i>
                        <span>Security Questions</span>
                    </a>
                </div>
            </div>
            
            <div class="recents">
                <h3>Recent Posts</h3>
                {{#if posts.length}}
                    {{#each posts}}
                        <div class="recent-post" data-navigate="/post/{{this._id}}">
                            <div class="recent-title">{{this.title}}</div>
                            <div class="recent-stats">
                                <span class="stat">üëç {{this.likes}}</span>
                                <span class="stat">üëé {{this.dislikes}}</span>
                                <span class="stat">üí¨ {{this.comments.length}}</span>
                            </div>
                        </div>
                    {{/each}}
                {{else}}
                    <p class="no-posts">No posts yet.</p>
                {{/if}}
            </div>
        </div>
    </div>

    <!-- Load JavaScript Components -->
    <script src="/js/utils/dom.js"></script>
    <script src="/js/services/apiClient.js"></script>
    <script src="/js/components/notification.js"></script>
    <script src="/js/components/modal.js"></script>
    <script src="/js/components/form.js"></script>
    <script src="/js/components/dropdown.js"></script>
    <script src="/js/app.js"></script>

    <script>
        // UserProfile specific functionality
        DOMUtils.ready(() => {
            // Edit quote functionality
            const editQuoteButton = $('#edit-quote-button');
            const quoteForm = $('#quote-form');
            const quoteDisplay = $('#quote-display');
            const cancelQuoteEdit = $('#cancel-quote-edit');
            const quoteInput = $('#quote-input');
            
            if (editQuoteButton && quoteForm && quoteDisplay) {
                DOMUtils.on(editQuoteButton, 'click', () => {
                    DOMUtils.hide(quoteDisplay);
                    DOMUtils.hide(editQuoteButton);
                    DOMUtils.show(quoteForm, 'block');
                    
                    if (quoteInput) {
                        quoteInput.focus();
                        quoteInput.select(); // Select all text for easy editing
                    }
                });
                
                if (cancelQuoteEdit) {
                    DOMUtils.on(cancelQuoteEdit, 'click', () => {
                        DOMUtils.show(quoteDisplay, 'block');
                        DOMUtils.show(editQuoteButton, 'inline-block');
                        DOMUtils.hide(quoteForm);
                        
                        // Reset input to original value
                        if (quoteInput) {
                            const originalQuote = quoteDisplay.textContent.includes('No quote set') ? '' : quoteDisplay.textContent;
                            quoteInput.value = originalQuote;
                        }
                    });
                }
                
                // Handle form submission with validation
                const quoteFormElement = quoteForm.querySelector('form');
                if (quoteFormElement) {
                    DOMUtils.on(quoteFormElement, 'submit', (e) => {
                        if (quoteInput && quoteInput.value.length > 200) {
                            e.preventDefault();
                            NotificationSystem.error('Quote must be 200 characters or less');
                            return;
                        }
                        
                        // Show loading state
                        const submitBtn = quoteFormElement.querySelector('button[type="submit"]');
                        if (submitBtn) {
                            submitBtn.textContent = 'Saving...';
                            submitBtn.disabled = true;
                        }
                    });
                }
                
                // Character counter for quote input
                if (quoteInput) {
                    const updateCounter = () => {
                        const length = quoteInput.value.length;
                        let counter = quoteForm.querySelector('.char-counter');
                        
                        if (!counter) {
                            counter = document.createElement('div');
                            counter.className = 'char-counter';
                            quoteInput.parentNode.appendChild(counter);
                        }
                        
                        counter.textContent = `${length}/200`;
                        counter.className = length > 180 ? 'char-counter warning' : 'char-counter';
                    };
                    
                    DOMUtils.on(quoteInput, 'input', updateCounter);
                    updateCounter(); // Initial count
                }
            }
        });
    </script>
</body>
</html>